const Discord = require('discord.js');
const client = new Discord.Client();
const music = require('discord.js-music-v11');
const fs = require('fs');
const ytdl = require('ytdl-core');
const ffmpeg = require('ffmpeg');
const Canvas = require('canvas');

//NjIyNzQ2MzEyOTE5NDgyMzc4.XYOZZw.tgcrKbiXrnuTfni5vvAFYWg2LOs
//NjIzOTgwMDU3OTk1NzcxOTA0.XYprzA.WoDyStRNTarTdHBU_2cWNVWb4ZU


const token = "NjIzOTgwMDU3OTk1NzcxOTA0.XYprzA.WoDyStRNTarTdHBU_2cWNVWb4ZU"
var prefix = 't'
ver = '0.4.1' //version

//log
client.on('ready',  () => {

console.log(`${new Date()}`);
console.log('Starting...');
  console.log('Petrivna TEST ' + ver);
  console.log('Loading discord.js...');
  console.log('Loading modules...');
console.log('Copyright BR1ZE 2019');
console.log('Done. Bot is online!');
client.user.setActivity(prefix + 'p + link / C‚Çø ' + ver); 
console.log('=============================');
});
client.once('reconnecting', () => {
 console.log('Reconnecting!');
});
client.once('disconnect', () => {
 console.log('Disconnect!');
});



//NjIyNzQ2MzEyOTE5NDgyMzc4.XYOZZw.tgcrKbiXrnuTfni5vvAFYWg2LOs
//NjIzOTgwMDU3OTk1NzcxOTA0.XYprzA.WoDyStRNTarTdHBU_2cWNVWb4ZU











//Commands
// set message listener 

client.on('message', message => {
    if(message.author === client.user) return;
	/*    */
    if(message.content === (prefix + '—Ö–∞–π')) {
        message.channel.send('–ó–¥–∞—Ä–æ–≤–∞ ' + message.author.username + '!');
     }
	
	 if ((message.content === '–í—ñ—Ç–∞—é') && (message.author.id == '423195864798986240')){
    message.channel.send('–í—ñ—Ç–∞—é —Ç–µ–±–µ –æ –º—ñ–π —Ç–≤–æ—Ä–µ—Ü—å! https://tenor.com/view/blow-kisses-keanu-reeves-gif-14310726')
}


});
//delete
/*
let amount = !!parseInt(message.content.split(' ')[1]) ? parseInt(message.content.split(' ')[1]) : parseInt(message.content.split(' ')[2])



if (message.content.startsWith(prefix + 'clear') && !amount) 
    return message.reply('Must specify an amount to clear!');
if (message.content.startsWith(prefix + 'clear') && !amount && !user) return message.reply('Must specify a user and amount, or just an amount, of messages to clear!');
    message.channel.fetchMessages({
        limit: amount,
    }).then((messages) => {
    if (user) {
        const filterBy = user ? user.id : bot.user.id;
        messages = messages.filter(m => m.author.id === filterBy).array().slice(0, amount);
    }
    message.channel.bulkDelete(messages).catch(error => console.log(error.stack));
});
*/


//LEVELS


/*


points = JSON.parse(fs.readFileSync("sp.json", "utf8"));


client.on("message", message => {
  if (message.content.startsWith(prefix)) return;
  if (message.author.bot) return;

  if (!points[message.author.id]) points[message.author.id] = {
    points: 0,
    level: 0
  };
  let userData = points[message.author.id];
  userData.points++;
console.log(userData.points);
  let curLevel = Math.floor(Math.sqrt(userData.points));
  if (curLevel > userData.level) {
    // Level up!
    userData.level = curLevel;
	var n = parseInt( Math.random()*4 );
	//console.log(n);	
	if (n==0){
    message.reply('–¢–∏ —â–æ–π–Ω–æ –ø—ñ–¥–≤–∏—â–∏–≤ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ '+ curLevel+'-–≥–æ. –•—ñ–±–∞ —Ü–µ –Ω–µ —á—É–¥–æ–≤–æ?):smiling_imp: ');}
  if (n==1){
    message.reply('–¢–∏ —â–æ–π–Ω–æ –ø—ñ–¥–≤–∏—â–∏–≤ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ '+ curLevel+'-–≥–æ. –¢–∏ –∫—Ä—É—Ç–∏–π):cool: ');}
  if (n==2){
    message.reply('–¢–∏ —â–æ–π–Ω–æ –ø—ñ–¥–≤–∏—â–∏–≤ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ '+ curLevel+'-–≥–æ. –û—Ç–æ —Ç–∏ –º–æ—â–Ω–∏–π!):scream: ');}
  if (n==3){
    message.reply('–¢–∏ —â–æ–π–Ω–æ –ø—ñ–¥–≤–∏—â–∏–≤ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ '+ curLevel+'-–≥–æ. –ù–µ –∑—É–ø–∏–Ω—è–π—Å—è!):grin: ');}
  
  }

  if (message.content == ("level")) {
	  message.channel.bulkDelete(1);
    message.reply('–¢–≤—ñ–π —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å - ' + userData.level +'. –î–∂–æ–π—Å—Ç–∏–∫—ñ–≤ - '+ userData.points +':video_game:.');
  }
  fs.writeFile("sp.json", JSON.stringify(points), (err) => {
	//console.log('Saved');  
   if (err) console.error(err)});

});*/
 /*[points.423195864798986240 {
points: 0,
level: 0}]*/


//LEVELS
const applyText = (canvas, text) => {
	const ctx = canvas.getContext('2d');

	// Declare a base size of the font
	let fontSize = 70;

	do {
		// Assign the font to the context and decrement it so it can be measured again
		ctx.font = `${fontSize -= 10}px sans-serif`;
		// Compare pixel width of the text to the canvas minus the approximate avatar size
	} while (ctx.measureText(text).width > canvas.width - 300);

	// Return the result to use in the actual canvas
	return ctx.font;
};/*
client.on("message", async message => {
	 if (message.content == ("level")) {
	const channel = client.channels.get('557602253809385478');
	if (!channel) return;

	const canvas = Canvas.createCanvas(700, 250);
	const ctx = canvas.getContext('2d');

	const background = await Canvas.loadImage('./back.png');
	ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

	ctx.strokeStyle = '#74037b';
	ctx.strokeRect(0, 0, canvas.width, canvas.height);

	// Slightly smaller text placed above the member's display name
	ctx.font = '28px sans-serif';
	ctx.fillStyle = '#ffffff';
	ctx.fillText('Welcome to the server,', canvas.width / 2.5, canvas.height / 3.5);

	// Add an exclamation point here and below
	ctx.font = applyText(canvas, message.author.username);
	ctx.fillStyle = '#ffffff';
	ctx.fillText(message.author.username, canvas.width / 2.5, canvas.height / 1.8);

	ctx.beginPath();
	ctx.arc(125, 125, 100, 0, Math.PI * 2, true);
	ctx.closePath();
	ctx.clip();

	const avatar = await Canvas.loadImage(member.user.avatar);
	ctx.drawImage(avatar, 25, 25, 200, 200);

	const attachment = new Discord.MessageAttachment(canvas.toBuffer(), 'welcome-image.png');

	 channel.send('Welcome to the server,' + message.author.username +'!'+ attachment);}
});*/
/*
client.on('guildMemberAdd', async member => {
	const channel = client.channels.get('563785803160092673');
	if (!channel) return;

	const canvas = Canvas.createCanvas(700, 250);
	const ctx = canvas.getContext('2d');

	const background = await Canvas.loadImage('./background.jpg');
	ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

	ctx.strokeStyle = '#74037b';
	ctx.strokeRect(0, 0, canvas.width, canvas.height);

	// Slightly smaller text placed above the member's display name
	ctx.font = '28px sans-serif';
	ctx.fillStyle = '#ffffff';
	ctx.fillText('Welcome to the server,', canvas.width / 2.5, canvas.height / 3.5);

	// Add an exclamation point here and below
	ctx.font = applyText(canvas, member.displayName);
	ctx.fillStyle = '#ffffff';
	ctx.fillText(member.displayName, canvas.width / 2.5, canvas.height / 1.8);

	ctx.beginPath();
	ctx.arc(125, 125, 100, 0, Math.PI * 2, true);
	ctx.closePath();
	ctx.clip();

	const avatar = await Canvas.loadImage(member.user.avatar.png);
	ctx.drawImage(avatar, 25, 25, 200, 200);

	const attachment = new Discord.MessageAttachment(canvas.toBuffer(), 'welcome-image.jpg');

	channel.send('Welcome to the server,' + member.displayName +'!'+ attachment);
});
*/







//Moderator
client.on('guildMemberAdd', member => {
  console.log(member.user.username + ' + 1 Gamer!')
  var role1 = member.guild.roles.find('name', 'üéÆGAMERüéÆ') 
  role2 = member.guild.roles.find('name', '–ú—î–ª–∫–∏–π')
  member.addRole(role1)
member.addRole(role2)
// –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  member.guild.channels.get('557602253809385478').send('–ó–¥–∞—Ä–æ–≤–∞ ' + member.user.username + ', –Ø–∫ –∂–∏—Ç—É—Ö–∞?') 
});
  
/*  
client.on('message', message => {
if(message.content.startsWith('!' + "–≤–∏–¥–∞–ª–∏")){
    if(!message.member.hasPermission("MANAGE_MESSAGES"))return(message.reply('you need to have ' + MANAGE_MESSAGES +' permission to do that'))//–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ—Ç
    //var args = message.content.slice(prefix.content).trim().split(/ +/g);
	
	let howmanydelete = message.content.slice(8,10)//—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å, —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 1 –≤ –º–∞—Å—Å–∏–≤–µ args
    if(!howmanydelete)return(message.reply("please enter how many messages you want to delete"))//–µ—Å–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–∫–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å, —Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç "–≤–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å"

    if(howmanydelete < 1)return(message.reply("please enter number more than 1"))//–µ—Å–ª–∏ –º–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ, —Ç–æ —Å–∞–º–∏ –≤–∏–¥–∏—Ç–µ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç
    if(howmanydelete > 100)return(mesasge.reply("please enter number lower than 100"))//–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ 100? –¢–∞–∫–æ–π –ª–∏–º–∏—Ç —É api Discord-–∞ –¥–ª—è –±–æ—Ç–æ–≤

    message.channel.bulkDelete(howmanydelete + 1)//–ø–æ—Å–ª–µ –∂–¥–µ–º –ø–æ–∫–∞ —É–¥–∞–ª–∏—Ç –Ω–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    message.channel.send('Deleted '+ howmanydelete + ' messages')//–∏ –Ω–∞–ø–∏—à–µ—Ç —á—Ç–æ —É–¥–∞–ª–∏–ª–æ –∏—Ö
	 console.log(message.author.username +' + deleted ' + howmanydelete +' messages in channel '+ message.channel.name)
	// timerId = setInterval(() => 2000);
		//	setTimeout(() => { clearInterval(timerId); message.channel.bulkDelete (1)}, 7000);   
	 
}})

*/


/**/
/**/

//YTDL

//Cstom commands
function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}


client.on('message', message => {
    if (message.content == ('!–∑')) {
	var n = parseInt( Math.random()*4 );
	console.log(n);	
	if (n==0){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ó–∏–º–∞ –±–ª–∏–∑—å–∫–æ!!! –¶–µ –¥–æ–≤–≥–∞, —Ç–µ–º–Ω–∞, —Ö–æ–ª–æ–¥–Ω–∞ –Ω—ñ—á. –í –ª—é–¥—è—Ö –ø—Ä–æ–∫–∏–¥–∞—î—Ç—å—Å—è –∑–≤—ñ—Ä. –¢–∞ –±–æ—è—Ç–∏—Å—å —Ç—Ä–µ–±–∞ –Ω–µ –∂–∏–≤–∏—Ö...https://tenor.com/view/whitewalkers-gif-9012602');
		return;	}
	if (n==1){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ó–∏–º–∞ –±–ª–∏–∑—å–∫–æ! –°–Ω—ñ–≥ –≤–∏–ø–∞–¥–∞—î –≥–ª–∏–±–∏–Ω–æ—é –≤ —Ç—Ä–∏–¥—Ü—è—Ç—å –º–µ—Ç—Ä—ñ–≤! –õ—å–æ–¥—è–Ω–∏–π –≤—ñ—Ç–µ—Ä –¥—É—î –∑ –ø—ñ–≤–Ω–æ—á—ñ! –°–æ–Ω—Ü–µ —Å—ñ–¥–∞—î –Ω–∞ –¥–æ–≤–≥—ñ —Ä–æ–∫–∏, –∞ –¥—ñ—Ç–∏ –Ω–∞—Ä–æ–¥–∂—É—é—Ç—å—Å—è —ñ –ø–æ–º–∏—Ä–∞—é—Ç—å –≤ —Ç–µ–º—Ä—è–≤—ñ!https://tenor.com/view/game-of-thrones-white-walker-walk-fire-flames-gif-4223785');	
			return;	}
		if (n==2){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ó–∏–º–∞ –±–ª–∏–∑—å–∫–æ! –°–Ω—ñ–≥ –≤–∏–ø–∞–¥–∞—î –≥–ª–∏–±–∏–Ω–æ—é –≤ —Ç—Ä–∏–¥—Ü—è—Ç—å –º–µ—Ç—Ä—ñ–≤! –õ—å–æ–¥—è–Ω–∏–π –≤—ñ—Ç–µ—Ä –¥—É—î –∑ –ø—ñ–≤–Ω–æ—á—ñ! –°–æ–Ω—Ü–µ —Å—ñ–¥–∞—î –Ω–∞ –¥–æ–≤–≥—ñ —Ä–æ–∫–∏, –∞ –¥—ñ—Ç–∏ –Ω–∞—Ä–æ–¥–∂—É—é—Ç—å—Å—è —ñ –ø–æ–º–∏—Ä–∞—é—Ç—å –≤ —Ç–µ–º—Ä—è–≤—ñ!https://tenor.com/view/game-of-thrones-whitewalker-monster-staring-snow-gif-6144428');	
		return;		}
    if (n==3){message.channel.bulkDelete(1);
	
            message.channel.sendMessage('–ó–∏–º–∞ –±–ª–∏–∑—å–∫–æ!!! –¶–µ –¥–æ–≤–≥–∞, —Ç–µ–º–Ω–∞, —Ö–æ–ª–æ–¥–Ω–∞ –Ω—ñ—á. –í –ª—é–¥—è—Ö –ø—Ä–æ–∫–∏–¥–∞—î—Ç—å—Å—è –∑–≤—ñ—Ä. –¢–∞ –±–æ—è—Ç–∏—Å—å —Ç—Ä–µ–±–∞ –Ω–µ –∂–∏–≤–∏—Ö...https://tenor.com/view/stripping-undead-skeleton-zombie-look-at-this-gif-13899167');	}
	return;	}
});

client.on('message', message => {
    if (message.content == ('!–≥—Ä–∞')) {
	var n = parseInt( Math.random()*4 );
	console.log(n);	
	if (n==0){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ì–æ –≥—Ä–∞—Ç–∏ –ê–ø–µ–∫—Å');
		return;	}
	if (n==1){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ì–æ –≥—Ä–∞—Ç–∏ –ö–°');	
			return;	}
		if (n==2){message.channel.bulkDelete(1);
            message.channel.sendMessage('–ì–æ –≤ –°–≤–æ—é –ì—Ä—É');	
		return;		}
    if (n==3){message.channel.bulkDelete(1);
	
            message.channel.sendMessage('–ì–æ –≤ –ü—É–±–≥');	}
	return;	}
});



//Cstom commands


{
const queue = new Map();



client.once('ready', () => {
	console.log('Ready!');
});

client.once('reconnecting', () => {
	console.log('Reconnecting!');
});

client.once('disconnect', () => {
	console.log('Disconnect!');
});

client.on('message', async message => {
	if (message.author.bot) return;
	if (!message.content.startsWith(prefix)) return;

	const serverQueue = queue.get(message.guild.id);

	if (message.content.startsWith(prefix +'p')) {
		execute(message, serverQueue);
		return;
	} else if (message.content.startsWith(prefix+'skip')) {
		skip(message, serverQueue);
		return;
	} else if (message.content.startsWith(prefix+'stop')) {
		stop(message, serverQueue);
		return;
	} else {
		return;
	}
});

async function execute(message, serverQueue) {
	const args = message.content.split(' ');

	const voiceChannel = message.member.voiceChannel;
	if (!voiceChannel) return message.channel.send('–ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É!');
	const permissions = voiceChannel.permissionsFor(message.client.user);
	if (!permissions.has('CONNECT') || !permissions.has('SPEAK')) {
		return message.channel.send('–Ø –Ω–µ –º–∞—é –ø—Ä–∞–≤!');
	}

	const songInfo = await ytdl.getInfo(args[1]);
	const song = {
		title: songInfo.title,
		url: songInfo.video_url,
	};

	if (!serverQueue) {
		const queueContruct = {
			textChannel: message.channel,
			voiceChannel: voiceChannel,
			connection: null,
			songs: [],
			volume: 5,
			playing: true,
		};

		queue.set(message.guild.id, queueContruct);

		queueContruct.songs.push(song);

		try {
			var connection = await voiceChannel.join();
			queueContruct.connection = connection;
			play(message.guild, queueContruct.songs[0]);
		} catch (err) {
			console.log(err);
			queue.delete(message.guild.id);
			return message.channel.send(err);
		}
	} else {
		serverQueue.songs.push(song);
		console.log(serverQueue.songs);
		return message.channel.send(`${song.title} –¥–æ–¥–∞–≤ –¥–æ —á–µ—Ä–≥–∏!`);
	}

}

function skip(message, serverQueue) {
	if (!message.member.voiceChannel) return message.channel.send('–ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É!');
	if (!serverQueue) return message.channel.send('–ù–µ–º–∞ –ø—ñ—Å–µ–Ω—å —è–∫—ñ —è –º–æ–∂—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏!');
	serverQueue.connection.dispatcher.end();
}

function stop(message, serverQueue) {
	if (!message.member.voiceChannel) return message.channel.send('–ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É!');
	serverQueue.songs = [];
	serverQueue.connection.dispatcher.end();
}

function play(guild, song) {
	const serverQueue = queue.get(guild.id);

	if (!song) {
		serverQueue.voiceChannel.leave();
		queue.delete(guild.id);
		return;
	}

	const dispatcher = serverQueue.connection.playStream(ytdl(song.url))
		.on('end', () => {
			console.log('Music ended!');
			serverQueue.songs.shift();
			play(guild, serverQueue.songs[0]);
		})
		.on('error', error => {
			console.error(error);
		});
	dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
}

}
//YTDL





client.on('message', message => {
    if (message.content.startsWith ('ResTern')) {
            message.channel.sendMessage('RODIPIT');
			timerId = setInterval(() => message.channel.sendMessage('–•–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏!'), 2000);
			setTimeout(() => { clearInterval(timerId);  message.channel.sendMessage('–•–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏!') }, 2000);   
    }
});








client.on('message', message => {
    if (message.content.startsWith ('–ö–æ–≤–∞–ª—å —Ö—É–π')) {
            message.channel.sendMessage('–í–æ—ñ—Å—Ç–∏–Ω—É –•–£–ô');
			timerId = setInterval(() => message.channel.sendMessage('–•–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏!'), 2000);
			setTimeout(() => { clearInterval(timerId);  message.channel.sendMessage('–•–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏!') }, 2000);   
    }
});

//
client.on('message', message => {

if (message.content === (prefix+'1')) {
       client.channels.get('557602253809385478').sendMessage('–ô–¥–∏ –≤ –∂–æ–ø—É –∑—ñ —Å–≤–æ—ó–º–∏ —Å—Ä–æ–∫–∞–º–∏')
}	


if (message.content === '–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?') {
        message.channel.sendMessage('–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ë–æ–≥–¥–∞–Ω, —è —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π BR1Z`–æ–º. –ó—Ä–æ–±–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥–æ–º–æ–≥–æ –≤—á–∏—Ç–µ–ª—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ê —Ç–µ–±–µ —è–∫ –∑–≤–∞—Ç–∏?');
}

	if (message.content === '–©–æ —Ç–∏ –≤–º—ñ—î—à?') {
        message.channel.sendMessage('–ö–∞–≤–∏ –Ω–µ –≤–∞—Ä—é, —Å–≤—ñ—Ç –Ω–µ –∑–∞—Ö–æ–ø–ª—é—é, –∞–ª–µ —à–≤–∏–¥–∫–æ –≤—á—É—Å—å :grin:  –í–º—ñ—é –≤—ñ—Ç–∞—Ç–∏ –ª—é–¥–µ–π –ø—Ä–∏ –∑–∞—Ö–æ–¥—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
}
	if (message.content === '–Ø–∫ —Å–ø—Ä–∞–≤–∏?') {
        message.channel.sendMessage('–¢–∏ –¥–µ–±—ñ–ª —á–∏ —Ç–∞? –Ø –±–æ—Ç –≤ –º–µ–Ω–µ —Å–ø—Ä–∞–≤–∏ –ù–Ü–Ø–ö!');
}
	if ((message.content === '–ü—Ä–∏–≤—ñ—Ç') && (message.author.id == '447039831449665536')) {
	message.channel.sendMessage('–ü—Ä–∏–≤—ñ—Ç –Ü–≥–æ—Ä–∏—á, —è–∫ —Å—è –º–∞—î—à?');} else if (message.content === '–ü—Ä–∏–≤—ñ—Ç') {message.channel.sendMessage('–ü—Ä–∏–≤—ñ—Ç —á—É–≤–∞—á–µ');}
}); 
//Spam
/*
let timerId = setInterval(() => client.channels.get('557602253809385478').sendMessage('Hi'), 1000);
*/








/*
var firstCall = true;
client.on('message', message => {
	if(message.content === ('RODIPIT')) {
	message.channel.send('Ti Pidar!')  
	}

		 if((message.member.id == '500002237083287552')&&(firstCall == true)){
      message.channel.send('–ü—ñ–¥–∞—Ä –æ–±`—è–≤–∏–≤—Å—è!');
	  firstCall = false;
}	  
})
*/

// listener for restart 
client.on('message', message => {
    switch(message.content.toUpperCase()) {
        case '?RESET':
		 message.channel.bulkDelete(1);
            resetBot(message.channel);
            break;
    }
});

// Turn bot off (destroy)
function resetBot(channel) {
    // send channel a message
    channel.send('I`ll be back...')
    .then(msg => client.destroy())
    .then(() => client.login(token));  //–¢–æ–∫–µ–Ω —Å—é–¥–∏!
}


client.login(token); //–¢–æ–∫–µ–Ω —Å—é–¥–∏!
